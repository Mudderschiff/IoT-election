/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: buff.proto */

#ifndef PROTOBUF_C_buff_2eproto__INCLUDED
#define PROTOBUF_C_buff_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct SchnorrProofProto SchnorrProofProto;
typedef struct CoefficientProto CoefficientProto;
typedef struct ElectionPolynomialProto ElectionPolynomialProto;
typedef struct ElectionKeyPairProto ElectionKeyPairProto;
typedef struct HashedElGamalCiphertextProto HashedElGamalCiphertextProto;
typedef struct ElectionPartialKeyPairBackupProto ElectionPartialKeyPairBackupProto;
typedef struct ElectionPartialKeyVerificationProto ElectionPartialKeyVerificationProto;


/* --- enums --- */


/* --- messages --- */

struct  SchnorrProofProto
{
  ProtobufCMessage base;
  ProtobufCBinaryData pubkey;
  ProtobufCBinaryData commitment;
  ProtobufCBinaryData challenge;
  ProtobufCBinaryData response;
};
#define SCHNORR_PROOF_PROTO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&schnorr_proof_proto__descriptor) \
    , {0,NULL}, {0,NULL}, {0,NULL}, {0,NULL} }


struct  CoefficientProto
{
  ProtobufCMessage base;
  ProtobufCBinaryData value;
  ProtobufCBinaryData commitment;
  SchnorrProofProto *proof;
};
#define COEFFICIENT_PROTO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&coefficient_proto__descriptor) \
    , {0,NULL}, {0,NULL}, NULL }


struct  ElectionPolynomialProto
{
  ProtobufCMessage base;
  int32_t num_coefficients;
  size_t n_coefficients;
  CoefficientProto **coefficients;
};
#define ELECTION_POLYNOMIAL_PROTO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&election_polynomial_proto__descriptor) \
    , 0, 0,NULL }


struct  ElectionKeyPairProto
{
  ProtobufCMessage base;
  /*
   * fixed length of 6 bytes
   */
  ProtobufCBinaryData guardian_id;
  ProtobufCBinaryData public_key;
  ProtobufCBinaryData private_key;
  ElectionPolynomialProto *polynomial;
};
#define ELECTION_KEY_PAIR_PROTO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&election_key_pair_proto__descriptor) \
    , {0,NULL}, {0,NULL}, {0,NULL}, NULL }


struct  HashedElGamalCiphertextProto
{
  ProtobufCMessage base;
  ProtobufCBinaryData pad;
  ProtobufCBinaryData data;
  ProtobufCBinaryData mac;
};
#define HASHED_EL_GAMAL_CIPHERTEXT_PROTO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&hashed_el_gamal_ciphertext_proto__descriptor) \
    , {0,NULL}, {0,NULL}, {0,NULL} }


struct  ElectionPartialKeyPairBackupProto
{
  ProtobufCMessage base;
  /*
   * fixed length of 6 bytes
   */
  ProtobufCBinaryData sender;
  /*
   * fixed length of 6 bytes
   */
  ProtobufCBinaryData receiver;
  HashedElGamalCiphertextProto *encrypted_coordinate;
};
#define ELECTION_PARTIAL_KEY_PAIR_BACKUP_PROTO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&election_partial_key_pair_backup_proto__descriptor) \
    , {0,NULL}, {0,NULL}, NULL }


struct  ElectionPartialKeyVerificationProto
{
  ProtobufCMessage base;
  /*
   * fixed length of 6 bytes
   */
  ProtobufCBinaryData sender;
  /*
   * fixed length of 6 bytes
   */
  ProtobufCBinaryData receiver;
  /*
   * fixed length of 6 bytes
   */
  ProtobufCBinaryData verifier;
  protobuf_c_boolean verified;
};
#define ELECTION_PARTIAL_KEY_VERIFICATION_PROTO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&election_partial_key_verification_proto__descriptor) \
    , {0,NULL}, {0,NULL}, {0,NULL}, 0 }


/* SchnorrProofProto methods */
void   schnorr_proof_proto__init
                     (SchnorrProofProto         *message);
size_t schnorr_proof_proto__get_packed_size
                     (const SchnorrProofProto   *message);
size_t schnorr_proof_proto__pack
                     (const SchnorrProofProto   *message,
                      uint8_t             *out);
size_t schnorr_proof_proto__pack_to_buffer
                     (const SchnorrProofProto   *message,
                      ProtobufCBuffer     *buffer);
SchnorrProofProto *
       schnorr_proof_proto__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   schnorr_proof_proto__free_unpacked
                     (SchnorrProofProto *message,
                      ProtobufCAllocator *allocator);
/* CoefficientProto methods */
void   coefficient_proto__init
                     (CoefficientProto         *message);
size_t coefficient_proto__get_packed_size
                     (const CoefficientProto   *message);
size_t coefficient_proto__pack
                     (const CoefficientProto   *message,
                      uint8_t             *out);
size_t coefficient_proto__pack_to_buffer
                     (const CoefficientProto   *message,
                      ProtobufCBuffer     *buffer);
CoefficientProto *
       coefficient_proto__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   coefficient_proto__free_unpacked
                     (CoefficientProto *message,
                      ProtobufCAllocator *allocator);
/* ElectionPolynomialProto methods */
void   election_polynomial_proto__init
                     (ElectionPolynomialProto         *message);
size_t election_polynomial_proto__get_packed_size
                     (const ElectionPolynomialProto   *message);
size_t election_polynomial_proto__pack
                     (const ElectionPolynomialProto   *message,
                      uint8_t             *out);
size_t election_polynomial_proto__pack_to_buffer
                     (const ElectionPolynomialProto   *message,
                      ProtobufCBuffer     *buffer);
ElectionPolynomialProto *
       election_polynomial_proto__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   election_polynomial_proto__free_unpacked
                     (ElectionPolynomialProto *message,
                      ProtobufCAllocator *allocator);
/* ElectionKeyPairProto methods */
void   election_key_pair_proto__init
                     (ElectionKeyPairProto         *message);
size_t election_key_pair_proto__get_packed_size
                     (const ElectionKeyPairProto   *message);
size_t election_key_pair_proto__pack
                     (const ElectionKeyPairProto   *message,
                      uint8_t             *out);
size_t election_key_pair_proto__pack_to_buffer
                     (const ElectionKeyPairProto   *message,
                      ProtobufCBuffer     *buffer);
ElectionKeyPairProto *
       election_key_pair_proto__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   election_key_pair_proto__free_unpacked
                     (ElectionKeyPairProto *message,
                      ProtobufCAllocator *allocator);
/* HashedElGamalCiphertextProto methods */
void   hashed_el_gamal_ciphertext_proto__init
                     (HashedElGamalCiphertextProto         *message);
size_t hashed_el_gamal_ciphertext_proto__get_packed_size
                     (const HashedElGamalCiphertextProto   *message);
size_t hashed_el_gamal_ciphertext_proto__pack
                     (const HashedElGamalCiphertextProto   *message,
                      uint8_t             *out);
size_t hashed_el_gamal_ciphertext_proto__pack_to_buffer
                     (const HashedElGamalCiphertextProto   *message,
                      ProtobufCBuffer     *buffer);
HashedElGamalCiphertextProto *
       hashed_el_gamal_ciphertext_proto__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   hashed_el_gamal_ciphertext_proto__free_unpacked
                     (HashedElGamalCiphertextProto *message,
                      ProtobufCAllocator *allocator);
/* ElectionPartialKeyPairBackupProto methods */
void   election_partial_key_pair_backup_proto__init
                     (ElectionPartialKeyPairBackupProto         *message);
size_t election_partial_key_pair_backup_proto__get_packed_size
                     (const ElectionPartialKeyPairBackupProto   *message);
size_t election_partial_key_pair_backup_proto__pack
                     (const ElectionPartialKeyPairBackupProto   *message,
                      uint8_t             *out);
size_t election_partial_key_pair_backup_proto__pack_to_buffer
                     (const ElectionPartialKeyPairBackupProto   *message,
                      ProtobufCBuffer     *buffer);
ElectionPartialKeyPairBackupProto *
       election_partial_key_pair_backup_proto__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   election_partial_key_pair_backup_proto__free_unpacked
                     (ElectionPartialKeyPairBackupProto *message,
                      ProtobufCAllocator *allocator);
/* ElectionPartialKeyVerificationProto methods */
void   election_partial_key_verification_proto__init
                     (ElectionPartialKeyVerificationProto         *message);
size_t election_partial_key_verification_proto__get_packed_size
                     (const ElectionPartialKeyVerificationProto   *message);
size_t election_partial_key_verification_proto__pack
                     (const ElectionPartialKeyVerificationProto   *message,
                      uint8_t             *out);
size_t election_partial_key_verification_proto__pack_to_buffer
                     (const ElectionPartialKeyVerificationProto   *message,
                      ProtobufCBuffer     *buffer);
ElectionPartialKeyVerificationProto *
       election_partial_key_verification_proto__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   election_partial_key_verification_proto__free_unpacked
                     (ElectionPartialKeyVerificationProto *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*SchnorrProofProto_Closure)
                 (const SchnorrProofProto *message,
                  void *closure_data);
typedef void (*CoefficientProto_Closure)
                 (const CoefficientProto *message,
                  void *closure_data);
typedef void (*ElectionPolynomialProto_Closure)
                 (const ElectionPolynomialProto *message,
                  void *closure_data);
typedef void (*ElectionKeyPairProto_Closure)
                 (const ElectionKeyPairProto *message,
                  void *closure_data);
typedef void (*HashedElGamalCiphertextProto_Closure)
                 (const HashedElGamalCiphertextProto *message,
                  void *closure_data);
typedef void (*ElectionPartialKeyPairBackupProto_Closure)
                 (const ElectionPartialKeyPairBackupProto *message,
                  void *closure_data);
typedef void (*ElectionPartialKeyVerificationProto_Closure)
                 (const ElectionPartialKeyVerificationProto *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor schnorr_proof_proto__descriptor;
extern const ProtobufCMessageDescriptor coefficient_proto__descriptor;
extern const ProtobufCMessageDescriptor election_polynomial_proto__descriptor;
extern const ProtobufCMessageDescriptor election_key_pair_proto__descriptor;
extern const ProtobufCMessageDescriptor hashed_el_gamal_ciphertext_proto__descriptor;
extern const ProtobufCMessageDescriptor election_partial_key_pair_backup_proto__descriptor;
extern const ProtobufCMessageDescriptor election_partial_key_verification_proto__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_buff_2eproto__INCLUDED */

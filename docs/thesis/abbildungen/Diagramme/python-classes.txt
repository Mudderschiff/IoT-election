@startuml 
set separator none
class "electionguard.guardian.Guardian" {
	ceremony_details
	id
	sequence_order
	bool generate_election_partial_key_backups()
	Optional[ElectionPartialKeyChallenge] publish_election_backup_challenge(guardian_id: GuardianId)
	Optional[ElementModP] publish_joint_key()
	None save_election_partial_key_backup(backup: ElectionPartialKeyBackup)
	None save_election_partial_key_verification(verification: EleionPrtialKeyVerification)
	None save_guardian_key(key: EectionPublicKey)
	Optional[ElectionPartialKeyBackup] share_election_partial_key_backup(designate_id: GuardianId)
	List[ElectionParialKeyBackup] share_election_partial_key_backups
	ElectionPublicKey share_key()
	Optional[ElectionPublicKe] share_other_guardian_key(guardian_id:GuardianId)
	Optional[ElectionPartialKeyVerification] verify_election_partial_key_backup(guardian_id:GuarianId)
	ElectionPartialKeyVerification verify_election_partial_key_challenge(challenge: ElectionPartialKeyChallenge)	
}
class "electionguard.key_ceremony.ElectioKeyPair" {
	key_pair
	owner_id:str
	polynomial
	sequence_order: int
	ElectionPublicKey share()
}
class "electionguard.election_poynomial.ElecionPolynomial" {
	coefficients : List[Coefficient]
	List[PublicCommitment] get_comitments()
	List[SchnorrProof] get_proofs() 
}
class "electionguard.elgamal.EGamalKeyPair" {
	public_key
	secret_key
}
class "electionguard.key_ceremony.ElectionPartialKeyBackup" {
	designated_id: str
	designated_sequence_order: int
	owner_id: str
}
class "electionguard.elgamal.HashedElGamalCihertext" {
	data: str
	mac: str
	pad
	Union[bytes, None] decrypt(secret_key: ElgamalSecetKey, encryption_eed: ElementModQ)
	
}
class "electionguard.schorr.SchnorrProof" {
	challenge
	commitment
	public_key
	response
	usage
	bool is_valid()
}
class "elecionguard.election_polynomial.Coefficient" {
	commitment
	proof
	value
}

"electionguard.guardian.Guardian" *-- "electionguard.key_ceremony.ElectioKeyPair" : _election_keys
"electionguard.key_ceremony.ElectioKeyPair" *-- "electionguard.election_poynomial.ElecionPolynomial" : polynomial
"electionguard.key_ceremony.ElectioKeyPair" *-- "electionguard.elgamal.EGamalKeyPair" : key_pair
"electionguard.key_ceremony.ElectionPartialKeyBackup" *-- "electionguard.elgamal.HashedElGamalCihertext" : encrypted_coordinate
"elecionguard.election_polynomial.Coefficient" *-- "electionguard.schorr.SchnorrProof" : proof



@enduml